{"version":3,"sources":["components/header/style.module.css","logo.svg","types/authTypes.js","containers/login/reducer.js","types/growlTypes.js","components/growl/reducer.js","reducer.js","containers/login/actions.js","containers/login/sagas.js","configureStore.js","services/fetch.js","containers/home/index.js","components/growl/actions.js","containers/error/index.js","containers/login/index.js","components/growl/style.js","components/growl/index.js","components/header/index.js","containers/notifications/index.js","containers/index.js","serviceWorker.js","index.js"],"names":["module","exports","sideMenu_Container","icons_container","navLink_container","profileContainer","profile_section","__webpack_require__","p","LOGIN","LOGIN_SUCCESS","initialState","loading","isLoggedIn","auth","GROWL_MESSAGE","message","text","finalReducer","combineReducers","state","arguments","length","undefined","action","type","authTypes","Object","objectSpread","fetching","growl","console","log","loginSuccess","watcherSaga","login","loginUser","hello","regenerator_default","a","wrap","_context","prev","next","all","takeLatest","stop","_marked","data","_context2","call","sent","put","authActions","t0","_marked2","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","myHeaders","Headers","Content-Type","checkStatus","response","status","error","Error","statusText","parseJSON","json","HomePage","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","insertMessage","url","method","payload","params","headers","body","JSON","stringify","fetch","then","request","title","userId","resp","catch","_this2","process","react_default","createElement","onClick","Component","connect","dispatch","NotFoundPage","LoginPage","style","growlContainer","width","display","flexDirection","visibility","position","zIndex","minHeight","background","margin","borderRadius","textAlign","color","close","height","paddingTop","hide","transition","GrowlComponent","index","messages","toConsumableArray","splice","setState","nextProps","push","setTimeout","timedOut","shift","_this3","styles","map","key","className","aria-hidden","arr","HeaderComponent","id","react_router_dom","to","src","logo","activeClassName","class","NotificationContainer","App","es","react_router","exact","path","component","LoginContainer","DefaultContainer","render","header_HeaderComponent","Boolean","location","hostname","match","ReactDOM","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6f66467.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideMenu_Container\":\"style_sideMenu_Container__3Qr2L\",\"icons_container\":\"style_icons_container__1hJ5k\",\"navLink_container\":\"style_navLink_container__xqcwm\",\"profileContainer\":\"style_profileContainer__n0ncZ\",\"profile_section\":\"style_profile_section__1yFDB\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const LOGIN = 'LOGIN';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n","import * as authTypes from '../../types/authTypes';\n\nconst initialState = {\n  loading: false,\n  isLoggedIn: false,\n  auth: {}\n};\n\nexport function AuthReducer(state = initialState, action) {\n  switch (action.type) {\n    case authTypes.LOGIN:\n      return { ...state, fetching: true };\n    case authTypes.LOGIN_SUCCESS:\n      return { ...state, fetching: false, isLoggedIn: true, auth: action.auth };\n    default:\n      return state;\n  }\n}\n","export const GROWL_MESSAGE = 'GROWL_MESSAGE';\n","import {GROWL_MESSAGE} from '../../types/growlTypes';\n\nconst initialState = {\n  message: {\n    text: 'hi'\n  }\n};\n\nexport function growlReducer(state = initialState, action) {\n  switch (action.type) {\n    case GROWL_MESSAGE:\n      console.log(action);\n      return { ...state, message: action.message };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { AuthReducer } from './containers/login/reducer';\nimport { growlReducer } from './components/growl/reducer';\n\nexport const finalReducer = combineReducers({\n  auth: AuthReducer,\n  growl: growlReducer\n});\n","import * as authTypes from '../../types/authTypes';\n\nexport const login = (auth) =>({\n  type: authTypes.LOGIN,\n  auth\n});\n\nexport const loginSuccess = (auth) =>({\n  type: authTypes.LOGIN_SUCCESS,\n  auth\n});","import * as authTypes from '../../types/authTypes';\nimport * as authActions from './actions';\n\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\n\nexport const loginUser = (auth) => {\n  return { hello: 'true' };\n};\nexport function* watcherSaga() {\n  yield all([\n    takeLatest(authTypes.LOGIN, login),\n  ]);\n}\n\n\n\nfunction* login(data) {\n  try {\n    const auth = yield call(loginUser, data.auth);\n    yield put(authActions.loginSuccess(auth));\n  } catch (error) {\n\n  }\n}","import { finalReducer } from './reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { watcherSaga } from './containers/login/sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  finalReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(watcherSaga);\nexport default store;","const myHeaders = new Headers({\n  \"Content-Type\": \"application/json; charset=UTF-8\"\n});\n\nexport function appendHeader(name, value) {\n  myHeaders.append(name, value);\n}\nexport function removeHeader(name) {\n  myHeaders.delete(name);\n}\nexport default function request(url, method, payload = {}) {\n  const params = {\n    method: method,\n    headers: myHeaders\n  };\n  if (method === \"post\") {\n    params.body = JSON.stringify(payload);\n  }\n  return fetch(url, params)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(response.statusText);\n  error.response = response;\n  return error;\n}\n\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { newGrowlMessage } from '../../components/growl/actions';\nimport request from '../../services/fetch';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n  insertMessage = () => {\n    this.props.insertMessage();\n    request(\"https://jsonplaceholder.typicode.com/posts\", \"post\", {\n      title: 'foo',\n      body: 'bar',\n      userId: 1\n    })\n      .then(resp => {\n        console.log(resp);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  render() {\n    console.log(process.env);\n    return (\n      <div>\n        Home\n        <button onClick={()=> {this.insertMessage()}}>UPDATE</button>\n      </div>\n    )\n  }\n  componentDidMount() {\n    // if (!localStorage.getItem('router')) {\n    //   this.props.history.push('/login'); \n    // }\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    insertMessage: () => dispatch(newGrowlMessage({text: 'message'}))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(HomePage);\n","import * as GROWL_MESSAGE from '../../types/growlTypes';\n\nexport const newGrowlMessage = (message) =>({\n  type: GROWL_MESSAGE.GROWL_MESSAGE,\n  message\n})","import React, { Component } from 'react'\n\nexport default class NotFoundPage extends Component {\n  render() {\n    return (\n      <div>\n        Not Found\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class LoginPage extends Component {\n  render() {\n    return (\n      <div>\n        Login\n      </div>\n    )\n  }\n}\n","export default {\n  growlContainer: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    visibility: 'visible',\n    position: 'absolute',\n    zIndex: '10000'\n  },\n  message: {\n    display: 'flex',\n    flexDirection: 'row',\n    minHeight: ' 50px',\n    background: 'red',\n    margin: '5px 15px',\n    borderRadius: '5px'\n  },\n  body: {\n    textAlign: 'center',\n    width: '90%',\n    color: 'white'\n  },\n  close: {\n    height: '-webkit-fill-available',\n    paddingTop: '5px',\n    color: 'white'\n  },\n  hide: {\n    height: '0px',\n    transition: 'visibility 0s, opacity 0.5s linear'\n  }\n};\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './style';\n\nclass GrowlComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: []\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    const messages = [...this.state.messages];\n    messages.push(nextProps.message);\n    this.setState({ messages });\n    setTimeout(() => {\n      const timedOut = [...this.state.messages];\n      timedOut.shift();\n      this.setState({ messages: timedOut });\n    }, 2000);\n  }\n  close = index => {\n    const messages = [...this.state.messages];\n    messages.splice(index, 1);\n    this.setState({ messages });\n  };\n  render() {\n    console.log(this.state);\n    console.log(this.props);\n    \n    return (\n      <div style={styles.growlContainer}>\n        {this.state.messages.map((message, index) => (\n          <div style={styles.message} key={index}>\n            <p style={styles.body}>{message.text}</p>\n            <i\n              onClick={() => this.close(index)}\n              className=\"fa fa-times\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log('did mount');\n    const arr = this.state.messages;\n    arr.push(this.props.message);\n    this.setState({\n      messages: arr\n    });\n  }\n}\nconst mapStateToProps = state => {\n  const { growl } = state;\n  return {\n    message: growl.message\n  };\n};\n\nexport default connect(mapStateToProps)(GrowlComponent);\n","import React, { Component } from \"react\";\nimport style from \"./style.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"../../logo.svg\";\nimport \"../../index.css\";\n\nexport default class HeaderComponent extends Component {\n  render() {\n    return (\n      <section className={style.sideMenu_Container} id=\"sideMenu\">\n        <section>\n          <div>\n            <NavLink to=\"/home\">\n              <img src={logo} />\n            </NavLink>\n          </div>\n        </section>\n        <section className={style.icons_container}>\n          <div className={style.navLink_container}>\n            <NavLink to=\"/home\" activeClassName=\"selected\">\n              <i class=\"fas fa-home unselected\" />\n            </NavLink>\n          </div>\n          <div className={style.navLink_container}>\n            <NavLink to=\"/notifications\" activeClassName=\"selected\">\n              <i className=\"fas fa-bell unselected\" />\n            </NavLink>\n          </div>\n          <div className={style.navLink_container}>\n            <NavLink to=\"/profile\" activeClassName=\"selected\">\n              <i class=\"fas fa-address-card unselected\" />\n            </NavLink>\n          </div>\n        </section>\n        <section className={style.profile_section}>\n          <div className={style.profileContainer}>\n            <i class=\"fas fa-user-circle\" />\n          </div>\n          <p>feedback</p>\n        </section>\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class NotificationContainer extends Component {\n  render() {\n    return (\n      <div>\n        Notifications\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport store from '../configureStore';\nimport { Provider } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport HomePage from '../containers/home/index';\nimport NotFoundPage from '../containers/error/index';\nimport LoginPage from '../containers/login/index';\nimport { BrowserRouter, Redirect } from 'react-router-dom';\nimport GrowlComponent from '../components/growl/index';\nimport HeaderComponent from '../components/header/index';\nimport NotificationContainer from '../containers/notifications/index';\n\nimport './style.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <GrowlComponent />\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/(login)\" component={LoginContainer} />\n            <Route component={DefaultContainer} />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nconst LoginContainer = () => (\n  <div className=\"container\">\n    <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n    <Route path=\"/login\" component={LoginPage} />\n  </div>\n);\n\nconst DefaultContainer = () => (\n  <div className=\"appContainer\">\n    <HeaderComponent />\n    <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n    <Route exact path=\"/home\" component={HomePage} />\n    <Route exact path=\"/notifications\" component={NotificationContainer} />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/index\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}